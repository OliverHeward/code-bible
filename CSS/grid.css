CSS GRID 

/* The grid can be used to lay out entire web pages. Whereas Flexbox is mostly useful for positioning items in a one-dimensional layout, CSS grid is most useful for two-dimensional layouts, providing many tools for aligning and moving elements across both rows and columns.

The follow properties are used to create grid layouts; */

* grid-template-columns
* grid-template-rows
* grid-template
* grid-template-area
* grid-gap
* grid-row-start / grid-row-end
* grid-column-start / grid-column-end
* grid-area

/* CSS grid is supported in the most recent versions of many browsers, but it is not supported universally. TO make sure that you can get the most out of this, https://www.whatsmybrowser.org/
AND SEE IF IT SUPPORTS CSS GRID
https://caniuse.com/#feat=css-grid

If CSS grid is not supported in your browser, you should switch or update to a supported browser and version.

CREATING A GRID

to set up a grid, you need to have both a grid container and grid items. The grid container will be a parent element that contains grid items as children and applies overarching styling and positioning to them. 

To turn a HTML element into a grid container, you must set the element’s ‘display’ property to ‘grid’ (for a block-level grid) or ‘inline-grid’ (for an inline grid). Then, you can assign other properties to lay out the grid. */

<body>
  <div class="grid">
    <div class="box a">A</div>
    <div class="box b">B</div>
    <div class="box c">C</div>
    <div class="box d">D</div>
    <div class="box e">E</div>
    <div class="box f">F</div>
    <div class="box g">G</div>
  </div>
</body>

/* 
Adding a display to grid;

under the style.css element set to .grid add 

display: grid;

CREATING COLUMNS 

By default, grids contain only one column. If you were to start adding items, each item would be put on a new row; thats not much of a grid! 
To change this, we need to explicitly define the number of rows and columns in our grid. 

We define the columns of our grid by using CSS property ‘grid-template-columns’.
Below is an example of this property in action;
*/

.grid {
	display: grid;
	width: 500px;
	grid-template-columns: 100px 200px;
}

/* This property creates two changes. First it defines the number of columns in the grid, in this case there are two. Secondly it sets the width of each column. The first column is set to 100px wide and the second to 200px wide.

You can also define the size of the column as a percentage of the entire grids width. */

.grid {
	display: grid;
	width: 1000px;
	grid-template-columns: 20% 50%;
}

/* With this example, the grid is 1000px wide. Therefor the first column will be 200px wide as it is 20% of 1000, while the second is 500px wide. */

.grid { 
	display: grid;
	width: 100px;
	grid-template-columns: 20px 40% 60px;
}

/* Notice in this example, the total width of the columns (120px) exceeds the 100px width of the grid set. This might make the grid cover other elements on the page! Later will be explained how to avoid overflow! 


CREATING ROWS

To specify the number and size of the rows, we are going to use the property ‘grid-template-rows’.

This property is almost identical to ‘grid-template-columns’. Take a look at the code below to see both properties in action; */

.grid {
	display: grid;
	width: 1000px;
	height: 500px;
	grid-template-columns: 100px 200px;
	grid-template-rows: 10% 20% 600px;
}

/* This grid has two columns and three rows. 
‘grid-template-rows’ defines the number of rows and sets each row’s height. In this example above, the first row is 50px tall (10% of 500), the second row is 100px tall (20% of 100) and the third row is 600px tall.

When using percentages in these two properties, remember that rows are defined as a percentage of the grids height, and columns are defined as a percentage of its width. 

GRID TEMPLATE

The property grid-template can replace the previous two CSS properties. Both ‘grid-template-rows’ and ‘grid-template-columns’ are no where to be found in the code. */

.grid { 
	display: grid;
	width: 1000px;
	height: 500px;
	grid-template: 200px 300px / 20% 10% 70%;
} 
/* 
When using ‘grid-template’ , the values before the slash will determine the size of each row. The values after the slash determine the size of each column. In this example, we’ve made two rows and three columns of varying sizes. 

The same rules from before apply; when using percentages to set rows, each row will be a percentage of the grid’s total height. Columns are still a percentage of the total width. */

/* EXAMPLE */

.grid {
  display: grid;
  border: 2px blue solid;
  width: 400px;
  height: 500px;
  grid-template: 40% 50% 50px / 100px 50% 200px;
}

/* 
FRACTION

There are several types of responsive units such as % em’s and rem’s. CSS grid uses a new relative sizing unit ‘ fr ’, like fraction.

By using the ‘ fr ‘ unit, we can define the size of columns and rows as a fraction of the grid’s length and width. This unit was specifically created for use in CSS grid. Using ‘ fr ‘ makes it easier to prevent grid items from overflowing the boundaries of the grid. Consider this code below; */

.grid { 
	display: grid;
	width: 1000px;
	height: 400px;
	grid-template: 2fr 1fr 1fr / 1fr 3fr 1fr;
} 

/* In this example, the grid will have three rows and three columns. The rows are splitting up the available 400px of height into four part. The first row gets two of those parts, the second column gets on, and the third column gets one. 
Therefore the first row is 200px tall, the second and third rows are 100px. 

Each columns width is a fraction of the available space. In this case, the available space is split into five parts. The first column gets one-fifth of the space, the second gets three-fifths, and the last column gets one-fifth. Since the total width is 1000px, this means that columns will have widths of 200px, 600px and 200px respectively. */

.grid {
	display: grid;
	width: 100px;
	grid-template-columns: 1fr 60px 1fr;
}

/* In the example above, 60 px are taken up by the second column. Therefore the first and third columns have 40 available to split between them. 
Since each one gets one fraction of the total, they both end up being 20px wide. */

.grid {
  display: grid;
  border: 2px blue solid;
  width: 400px;
  height: 500px;
  grid-template: 1fr 1fr 1fr / 3fr 50% 1fr;

/* with this example, the rows take up the exact same fraction of the available space - the columns take up 3/4 (1st) - half (2nd) and 1/4 (3rd).

REPEAT

the properties that define the number of rows and columns in a grid can take a function as a value. ‘repeat()’ is one of these functions.
The ‘repeat()’ function was created specifically for CSS grid. */

.grid {
	display: grid;
	width: 300px;
	grid-template-columns: repeat(3, 100px);
}

/* The repeat function will duplicate the specifications for rows or columns a given number of times. In this example, using the repeat function will make the grid have three columns that are each 100px wide. It is the same as writing;

grid-template-columns: 100px 100px 100px;

Repeat is particularly useful with ‘fr’. For example, ‘repeat(5, 1fr) would split the table into 5 equal rows or columns. 

The second parameter of repeat() can have multiple values. 

grid-template-columns: repeat(2, 20px 50px);

This code will create 4 columns where the first and third columns will be 20px wide and the second and forth will be 50px wide. 

 grid-template: repeat(3, 1fr) / 3fr 50% 1fr;

using repeat will change the 1fr 1fr 1fr previously used into repeat(3, 1fr) producing the same result. 

MINMAX

So far all the codes for grids set have been done using a fixed size.  The grid in the example has been 400px wide and 500px tall. But sometimes you might want a grid to resize based on the size of your web browser.

In these situations, you might want to prevent a row/column from getting to big or too small. For example, if you have a 100px wide image in your grid, you probably don’t want its column to get thinner than 100px - the ‘minmax()’ function can help us solve this problem. */

.grid {
	display: grid;
	grid-template-columns: 100px minmax(100px, 500px) 100px;
}

/* In this example, the first and third columns will always be 100px wide, no matter the size of the grid. The second column however, will vary in size as the overall grid resizes. The second column will always be between 100 - 500px wide.

 grid-template: repeat(3, 1fr) / 3fr minmax(50px, 300px) 1fr;

this example shows using the minmax to set the second column to have a variable between 50 - 300px.

GRID GAP

in all the grids so far, there hasn’t been any space between the mites in our grid. the CSS properties ‘grid-row-gap’ and ‘grid-column-gap’ will put blank space between every row and column in the grid. */

grid {
	display: grid;
	width: 320px;
	grid-tempate-columns: repeat(3, 1fr);
	grid-column-gap: 10px;
}

/* It is important to note that grid-gap does not add space at the beginning or end of the grid. in the example code above, the grid will have three columns with two 10px gaps between them. 

calculating how wide these columns are, remember that using fr considers all of the available space. The grid is 320px wide and 20 of those px are taken up by the two grid gaps.
Therefor each column takes a piece of the 300px available. Each column gets 1fr so the columns are evenly divided into thirds (or 100px each) 

There is a CSS property ‘grid-gap’ that can set the row and column gap at the same time. */

grid-gap: 20px 10px; 

/* this will set the distance between columns to 10px. Unlike other CSS grid properties, this shorthand does not take a ‘ / ‘ between values. If only one value is given, it will set up the column gap and the row gap to that value. */

  grid-row-gap: 20px;
  grid-column-gap: 5px;

/* this code has set a 20px row gap and a 5px columng gap.

using; */

grid-gap: 20px 5px; 

/* executes the same result as using row/column codes.

GRID ITEMS

In all the examples done, the items placed in the grid have always taken up exactly one square. This does not always need to be the case; we can drastically change the look of our grid by making grid items take up more than one row and one column. (SEE DIAGRAM ‘Grid.PNG’) The items A, B, C and E span more than one row. 

This is done by manipulating both the parent and the child elements, this can create beautiful layouts with ease. 

MULTIPLE ROW ITEMS;

Using the CSS properties ‘grid-row-start’ and ‘grid-row-end’, we can make single grid items take up multiple rows. Remember, we are no longer applying CSS to the outer grid container; we’re adding CSS to the elements sitting inside the grid! */

.item {
	grid-row-start: 1;
	grid-row-end: 3;
}

/* With this example, the THML element of class .item will take up two rows in the grid, rows 1 and 2. the values that ‘grid-row-start’ and ‘grid-row-end’ accept are grid lines.

Row grid lines and column grid lines start at 1 and end at a value that is 1 greater than the number of rows or columns the grid has. For example, if a grid has 5 rows, the grid row lines range from 1 to 6. if a grid has 8 columns, the grid row lines range from 1 to 9. 

The value for ‘grid-row-start’ should be the row at which you want the grid item to begin. 
The value for ‘grid-row-end’ should be one greater than the row at which you want the grid item to end. 
An element that covers rows 2, 3 and 4 should have these declarations; */
grid-row-start: 2
grid-row-end: 5

/* it is possible for the value of grid-row-start to be greater than that of grid-row-end. both properties can also each have negative values.  */

  grid-row-start: 5;
  grid-row-end: 7;

/* GRID ROW

We can use the property ‘grid-row’ as shorthand for the ‘start’ and ‘end’. these two pieces of code produce the same outcome. */

.item {
	grid-row-start: 4;
	grid-row-end: 6;
}


.item {
	grid-row: 4 / 6;
}

/* This code is similar to how the ‘grid-template’ rows and columns shorthand is set. 
In this case, the starting row goes before the ‘ / ‘ and the end row goes after it. Again, ending the row is exclusive; this grid item will occupy rows 4 and 5. 

When an item spans multiple rows or columns using these properties, it will also include the ‘grid-gap’ if any exists. For example, if an item spans two rows of height 100px and there is a 10px grid-gap, then the item will have a total of 210px.

this is because its 2x 100px (height) with the +10px grid-gap. 

grid-row: 5 / 7; 
*/
/*
GRID COLUMN

The previous three properties also exist for columns. 
grid-column-start
grid-column-end
grid-column
Work identically to the row properties. These properties allow a grid item to span multiple columns. 

When using these properties, we can use the keyword ‘ span ‘ to start or end a column or row relative to its other end. 
Look at how ‘ span ‘ is used in the code below;
*/
.item { 
	grid-column: 4 / span 2;
}

/* This is telling the item element to begin in the column 4 and take up 2 columns of space. 
So ‘ item ‘ would occupy columns 4 and 5. it produces the same result as the following code blocks.  */

.item {
	grid-column: 4 / 6;
}

.item {
	grid-column-start: 4;
	grid-column-end: span 2;
}

.item {
	grid-column-start: span 2;
	grid-column-end: 6;
} 
/* 
‘span’ is a useful keyword because it avoids off-by-one errors (miscalculating the ending grid line) you might make when determining the ending grid line of an element. if you know where you want your grid item to start and how long it should be, use ‘ span ‘!!!

To make a box start on column 2 and span across 6 columns use shorthand below; 

grid-column: 2 / span 6;

To make it take up a few rows, use this code for example - it will make the item take up rows 2 through 4.

grid-row: 2 / span 3;

span will make it SPAN across columns, so use this is a mathematics rather than an anchor to say i want it to go from 2 / 4, span will create it to span an EXTRA ‘X’ amount of columns/rows. 

GRID AREA

You can refactor even more using the property ‘grid-area’. This property will set the starting and ending position for both rows and columns of an item. */

.item {
	grid-area: 2 / 3 / 4 / span 5;
}

/* grid-area takes for values separated by slashes. The order is important! This is how grid-area will interpret those values

1. grid-row-start
2. grid-column-start
3. grid-row-end
4. grid-column-end

in the example above, the item will occupy rows two and three and columns three through eight.

Using grid-area is an easy way to place items exactly where you want them in a grid. 

grid-area: 6 / 8 / span 3 / span 1;

this will make the box start on row 6 and column 8 - whilst spanning 3 rows but only 1 column. 


grid-template-columns: 25% 25% 2fr 1fr;

This will structure the grid to have;
1. first two columns to take 25% 
2. the 3rd to take up 2/3’s
3. the last to take up the last third of remaining space.
*/

.a {
  grid-column-start: 1;
  grid-column-end: span 2;
  grid-row-start: 1;
  grid-row-end: 3;
}
/* 
this will make the grid-column start on 1 and end on 2 as it spans.
the grid-row will start on 1 and end on 3 but only take up 2 spaces. */


